# This code is generated by GitHub Copilot (VS Code)
import unittest
from utils import generate_random_password
import string

class TestPasswordGenerator(unittest.TestCase):
    # Test Case - GitHub Copilot generated: Test password length requirement
    def test_password_length(self):
        # Test normal length
        password = generate_random_password(12)
        self.assertEqual(len(password), 12)
        
        # Test minimum length
        password = generate_random_password(8)
        self.assertEqual(len(password), 8)
        
        # Test length less than minimum should raise error
        with self.assertRaises(ValueError):
            generate_random_password(7)

    # Test Case - GitHub Copilot generated: Test password character requirements
    def test_password_character_requirements(self):
        password = generate_random_password()
        
        # Test has lowercase
        self.assertTrue(any(c.islower() for c in password), 
                       "Password should contain at least one lowercase letter")
        
        # Test has uppercase
        self.assertTrue(any(c.isupper() for c in password), 
                       "Password should contain at least one uppercase letter")
        
        # Test has digit
        self.assertTrue(any(c.isdigit() for c in password), 
                       "Password should contain at least one digit")
        
        # Test has special character
        self.assertTrue(any(c in string.punctuation for c in password), 
                       "Password should contain at least one special character")

    # Test Case - GitHub Copilot generated: Test password space requirement
    def test_password_space_requirement(self):
        password = generate_random_password()
        self.assertFalse(' ' in password, 
                         "Password should not contain spaces")

    # Test Case - GitHub Copilot generated: Test multiple password generations
    def test_multiple_generations(self):
        # Generate multiple passwords and check they're different
        passwords = [generate_random_password() for _ in range(5)]
        unique_passwords = set(passwords)
        self.assertEqual(len(passwords), len(unique_passwords), 
                        "Generated passwords should be unique")

if __name__ == '__main__':
    unittest.main()